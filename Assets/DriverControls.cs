//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/DriverControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DriverControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DriverControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DriverControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""6b20d8b8-476d-452e-82b7-3e6ccecbb121"",
            ""actions"": [
                {
                    ""name"": ""DriveForward"",
                    ""type"": ""Button"",
                    ""id"": ""99ed40a7-a594-43dd-9335-310e29334636"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DriveBackward"",
                    ""type"": ""Button"",
                    ""id"": ""81c16141-2864-4dce-942a-f01237d0028f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Steer"",
                    ""type"": ""Button"",
                    ""id"": ""dcc84144-5718-4613-99d8-6da30818ab85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Button"",
                    ""id"": ""1ff297ec-4cb7-4d89-89aa-f5f0d23964b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f65001f0-67a6-4146-a9f4-4e1480263510"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74107925-b1e0-49d0-a00e-cf807937b91e"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eddd319e-e1b4-45ab-8071-c1293458995e"",
                    ""path"": ""<Gamepad>/leftStick/"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f592916f-0a58-4df0-8038-50cbc317002f"",
                    ""path"": ""<DualSenseGamepadHID>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_DriveForward = m_Gameplay.FindAction("DriveForward", throwIfNotFound: true);
        m_Gameplay_DriveBackward = m_Gameplay.FindAction("DriveBackward", throwIfNotFound: true);
        m_Gameplay_Steer = m_Gameplay.FindAction("Steer", throwIfNotFound: true);
        m_Gameplay_Camera = m_Gameplay.FindAction("Camera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_DriveForward;
    private readonly InputAction m_Gameplay_DriveBackward;
    private readonly InputAction m_Gameplay_Steer;
    private readonly InputAction m_Gameplay_Camera;
    public struct GameplayActions
    {
        private @DriverControls m_Wrapper;
        public GameplayActions(@DriverControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DriveForward => m_Wrapper.m_Gameplay_DriveForward;
        public InputAction @DriveBackward => m_Wrapper.m_Gameplay_DriveBackward;
        public InputAction @Steer => m_Wrapper.m_Gameplay_Steer;
        public InputAction @Camera => m_Wrapper.m_Gameplay_Camera;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @DriveForward.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDriveForward;
                @DriveForward.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDriveForward;
                @DriveForward.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDriveForward;
                @DriveBackward.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDriveBackward;
                @DriveBackward.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDriveBackward;
                @DriveBackward.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDriveBackward;
                @Steer.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSteer;
                @Steer.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSteer;
                @Steer.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSteer;
                @Camera.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCamera;
                @Camera.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCamera;
                @Camera.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCamera;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DriveForward.started += instance.OnDriveForward;
                @DriveForward.performed += instance.OnDriveForward;
                @DriveForward.canceled += instance.OnDriveForward;
                @DriveBackward.started += instance.OnDriveBackward;
                @DriveBackward.performed += instance.OnDriveBackward;
                @DriveBackward.canceled += instance.OnDriveBackward;
                @Steer.started += instance.OnSteer;
                @Steer.performed += instance.OnSteer;
                @Steer.canceled += instance.OnSteer;
                @Camera.started += instance.OnCamera;
                @Camera.performed += instance.OnCamera;
                @Camera.canceled += instance.OnCamera;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnDriveForward(InputAction.CallbackContext context);
        void OnDriveBackward(InputAction.CallbackContext context);
        void OnSteer(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
    }
}
